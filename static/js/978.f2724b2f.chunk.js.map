{"version":3,"file":"static/js/978.f2724b2f.chunk.js","mappings":"qPACA,GAAgB,KAAO,qBAAqB,YAAc,6B,kBCkH1D,EAnGe,WAUb,OAA0BA,EAAAA,EAAAA,UAAS,IAAnC,eAAOC,EAAP,KAAcC,EAAd,MAoBAC,EAAAA,EAAAA,YAAU,WAEN,IAAMC,EAAW,mCAAG,oHAGOC,EAAAA,EAAAA,MAHP,gBAGRC,EAHQ,EAGRA,KACFC,GAAU,OAAID,EAAKC,UAAT,OAAwBD,EAAKC,SAAW,GAGxDL,GAAS,OAAKK,IAPE,gDASRC,EATQ,KASRA,SACRC,QAAQC,IAAIF,EAASG,MAAMC,SAVX,qGAAH,qDAejBR,GAEH,GAAE,IAsBH,IAAMS,EAAWZ,EAAMa,KACrB,gBACEC,EADF,EACEA,GAEAC,GAHF,EAEEC,cAFF,EAGED,YAKAE,GARF,EAIEC,kBAJF,EAKEC,eALF,EAMEC,SANF,EAOEC,YAPF,EAQEJ,OARF,OAUE,SAAC,KAAD,CAAeK,GAAE,WAAMP,EAAN,YAAoBD,GAArC,UACE,eAAIS,UAAWC,EAAAA,KAAf,UACI,8BAAMP,QAFDH,EAVb,IAmBF,OACE,iCACE,4CACA,eAAIS,UAAWC,EAAAA,QAAf,SAAgCZ,MAGrC,EC5GD,EAHiB,WACf,OAAO,SAAC,EAAD,GACR,C,uNCFKa,EAAU,gCAGVC,EAAU,4CAQVC,EAAWC,EAAAA,EAAAA,OAAa,CAC5BC,QACE,6FAQSC,EAAe,SAAET,GAC5B,IACMU,EADW,kCACMV,EAEvB,OADAb,QAAQC,IAAI,eAAgBsB,GACrBA,CACR,EAEYC,EAAiB,mCAAG,+GAAOjB,EAAP,+BAAoB,QAASD,EAA7B,uBACzBiB,EAAMN,EAAUV,EAAa,IAAMD,EAAK,WAAaY,EAD5B,SAERC,EAASM,IAAIF,EAAK,CACvCG,OAAQ,CACNC,SAAU,QACVC,KAAM,KALqB,uBAEvB/B,EAFuB,EAEvBA,KAMRG,QAAQC,IAAI,oBAAqBJ,GARF,kBASxBA,GATwB,2CAAH,qDAYjBgC,EAAc,mCAAG,+GAAOtB,EAAP,+BAAoB,QAASD,EAA7B,uBACtBiB,EAAMN,EAAUV,EAAa,IAAMD,EAAK,WAAaY,EAD/B,SAELC,EAASM,IAAIF,EAAK,CACvCG,OAAQ,CACNC,SAAU,WAJc,uBAEpB9B,EAFoB,EAEpBA,KAKRG,QAAQC,IAAI,aAAcJ,GAPE,kBAQrBA,GARqB,2CAAH,qDAWdiC,EAAa,mCAAG,WAAOC,EAAQxB,EAAYqB,GAA3B,gFACrBL,EAAMN,EAAU,UAAYV,EAAaW,EAC/ClB,QAAQC,IAAI,gBAAiBsB,GAFF,SAGRJ,EAASM,IAAIF,EAAK,CACnCG,OAAQ,CACNC,SAAU,QACVK,MAAOD,EACPH,KAAMA,KAPiB,cAGrB/B,EAHqB,OAU3BG,QAAQC,IAAI,gBAAiBJ,GAVF,kBAWpBA,GAXoB,2CAAH,0DAsBboC,EAAc,mCAAG,6GAAO1B,EAAP,+BAAoB,QAASD,EAA7B,uBACtBiB,EAAMN,EAAUV,EAAa,IAAMD,EAAKY,EADlB,SAETC,EAASM,IAAIF,EAAK,CACnCG,OAAQ,CACNC,SAAU,WAJc,cAEtB9B,EAFsB,yBAOrBA,GAPqB,2CAAH,qDAUdD,EAAc,mCAAG,oGACTuB,EAASM,IA7E5B,4FA4E4B,cACtB5B,EADsB,yBAErBA,GAFqB,2CAAH,oD","sources":["webpack://react-homework-template/./src/Modules/Movies/movies.module.scss?9257","Modules/Movies/Movies.jsx","pages/HomePage/HomePage.jsx","shared/services/movies-api.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"item\":\"movies_item__xyEG3\",\"item__image\":\"movies_item__image__XU3U0\"};","import { useState, useEffect } from 'react';\nimport { Link } from 'react-router-dom';\nimport styles from './movies.module.scss';\n\n// import Modal from 'shared/components/Modal/Modal';\n// import Image from './Image/Image';\n\n// import Searchbar from './Searchbar/Searchbar';\n// import MoviesList from './MoviesList/MoviesList';\nimport { homePageMovies } from '../../shared/services/movies-api';\n// import { searchNewImages } from '../../shared/services/movies-api';\n// import Button from './ButtonLoad/ButtonLoad';\n// import Loader from './Loader/Loader';\n\n// import './movies-list.module.scss';\n\nconst Movies = () => {\n  // const [search, setSearch] = useState('');\n\n  // const [page, setPage] = useState(1);\n  // const [loading, setLoading] = useState(false);\n  // const [error, setError] = useState(null);\n  // const [showModal, setShowModal] = useState(false);\n  // const [image, setImage] = useState(null);\n  // const [total, setTotal] = useState(0);\n  // const per_page = 20;\n  const [items, setItems] = useState([]);\n  //   () => {\n  //   const fetchImagesStart = async () => {\n  // try {\n  //   setLoading(true);\n  //   const { data } = await startImages();\n  //   const results = [...data.results] ? [...data.results] : [];\n  //   console.log('results', results);\n  //   setTotal(0);\n  //   setItems([...results]);\n  // } catch (error) {\n  //   setError(error.message);\n  // } finally {\n  //   setLoading(false);\n  // }\n  //   };\n  //   // console.log('items', items);\n  //   fetchImagesStart();\n  // });\n\n  useEffect(() => {\n    // if (search) {\n      const fetchImages = async () => {\n        try {\n          // setLoading(true);\n          const { data } = await homePageMovies();\n          const results = [...data.results] ? [...data.results] : [];\n          // console.log('results', results);\n          // setTotal(0);\n          setItems([ ...results]);\n          // console.log('results useEffect', items);\n        } catch ({response}) {\n          console.log(response.error.message);\n        } finally {\n          // setLoading(false);\n        }\n      };\n      fetchImages();\n    // }\n  }, []);\n  // try {\n  //   setLoading(true);\n  //   const { data } = await searchNewImages(search, page);\n  //   setItems(prevItems => [...prevItems, ...data.hits]);\n  //   setTotal(data.totalHits);\n  // } catch (error) {\n  //   setError(error.message);\n  // } finally {\n  //   setLoading(false);\n  // }\n\n  // const searchImages = useCallback(({ search }) => {\n  //   setSearch(search);\n  //   setItems([]);\n  //   setPage(1);\n  // }, []);\n\n  // const changePage = () => {\n  //   setPage(page + 1);\n  // };\n\n  const elements = items.map(\n    ({\n      id,\n      backdrop_path,\n      media_type,\n      original_language,\n      original_title,\n      overview,\n      poster_path,\n      title,\n    }) => (\n      <Link key={id} to={`/${media_type}/${id}`}>\n        <li className={styles.item}>\n            <h3> {title}</h3>\n            {/* <p>{id}</p>\n            <p>{media_type}</p> */}\n        </li>\n      </Link>\n    )\n  );\n  return (\n    <>\n      <h2>Trending today</h2>\n      <ul className={styles.gallery}>{elements}</ul>\n    </>\n  );\n};\n\nexport default Movies;\n    \n\n\n\n\n\n\n  //   <Searchbar onSubmit={searchImages} />\n  //   {error && <p>Something goes wrong</p>} \n\n  //   {loading && <Loader />}\n  //   {!loading && <MoviesList items={items} />}\n  //   {!loading && <MoviesList items={items} showBigImage={showBigImage} />}\n\n  //      {!loading && showLoadButton() && (\n  //       <Button changePage={changePage} text=\"Load more\"></Button>)} \n  //     {showModal && (\n  //       <Modal close={closeModal}>\n  //         <Image Image={Image} />\n  //   </Modal>)\n  // }\n// const showLoadButton = () => {\n//   if (total <= page * per_page) {\n//     console.log(total, 'total');\n//     return false;\n//   }\n//   return true;\n// };\n\n// const closeModal = () => {\n//   setShowModal(false);\n//   setImage(null);\n// };\n\n// const showBigImage = useCallback(({ largeImageURL }) => {\n//   setImage(largeImageURL);\n//   setShowModal(true);\n// }, []);\n","import Movies from 'Modules/Movies/Movies';\n\nconst HomePage = () => {\n  return <Movies  />;\n};\nexport default HomePage;\n","import axios from 'axios';\n\nconst mainURL = 'https://api.themoviedb.org/3/';\n// const media_type_values = ['all', 'movie', 'TV', 'person'];\n// const time_window_values = ['day', 'week'];\nconst api_KEY = '?api_key=1a6a0e252669dea132492bf96fa96565';\n// const media_type = media_type_values[1];\n// const time_window = time_window_values[0];\nconst trendingURL =\n  'https://api.themoviedb.org/3/trending/movie/day?api_key=1a6a0e252669dea132492bf96fa96565';\n// const trendingURL =\n//   'https://api.themoviedb.org/3/search/movie?api_key=1a6a0e252669dea132492bf96fa96565&query=bat';\n\nconst instance = axios.create({\n  baseURL:\n    'https://api.themoviedb.org/3/trending/movie/day?api_key=1a6a0e252669dea132492bf96fa96565',\n  // params: {\n  //   image_type: 'photo',\n  //   orientation: 'horizontal',\n  // },\n});\n\n// /kqjL17yufvn9OVLyXYpvtyrFfak.jpg\nexport const makeImageUrl = ( poster_path ) => {\n  const basicUrl = 'https://image.tmdb.org/t/p/w500';\n  const url = basicUrl + poster_path;\n  console.log('makeImageUrl', url)\n  return url;\n};\n\nexport const searchReviewsById = async (media_type = 'movie', id) => {\n  const url = mainURL + media_type + '/' + id + '/reviews' + api_KEY;\n  const { data } = await instance.get(url, {\n    params: {\n      language: 'en-US',\n      page: 1,\n    },\n  });\n  console.log('searchReviewsById', data);\n  return data;\n};\n\nexport const searchCastById = async (media_type = 'movie', id) => {\n  const url = mainURL + media_type + '/' + id + '/credits' + api_KEY;\n  const { data } = await instance.get(url, {\n    params: {\n      language: 'en-US',\n    },\n  });\n  console.log('searchCast', data);\n  return data;\n};\n\nexport const searchByTitle = async (search, media_type, page) => {\n  const url = mainURL + 'search/' + media_type + api_KEY;\n  console.log('searchByTitle', url);\n  const data = await instance.get(url, {\n    params: {\n      language: 'en-US',\n      query: search,\n      page: page\n    },\n  });\n  console.log('searchByTitle', data);\n  return data;\n};\n\nexport const poster = async (media_type, id, poster_path) => {\n  const url = mainURL + media_type + '/' + id + poster_path + api_KEY;\n  console.log('poster', url);\n  const data = await instance.get(url);\n  console.log('poster', data, url);\n  return data;\n};\n\nexport const searchByIdType = async (media_type = 'movie', id) => {\n  const url = mainURL + media_type + '/' + id + api_KEY;\n  const data = await instance.get(url, {\n    params: {\n      language: 'en-US',\n    },\n  });\n  return data;\n};\n\nexport const homePageMovies = async () => {\n  const data = await instance.get(trendingURL);\n  return data;\n};\n"],"names":["useState","items","setItems","useEffect","fetchImages","homePageMovies","data","results","response","console","log","error","message","elements","map","id","media_type","backdrop_path","title","original_language","original_title","overview","poster_path","to","className","styles","mainURL","api_KEY","instance","axios","baseURL","makeImageUrl","url","searchReviewsById","get","params","language","page","searchCastById","searchByTitle","search","query","searchByIdType"],"sourceRoot":""}